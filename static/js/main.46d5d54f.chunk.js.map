{"version":3,"sources":["components/post/index.js","components/button/index.js","App.js","serviceWorker.js","index.js"],"names":["ShowPost","props","className","src","author","photo","alt","name","nickname","date","content","image","ChangeTextButton","useState","btnTxt","changeTxt","onClick","activeTxt","disableTxt","author1","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+PAsBeA,MAnBf,SAAkBC,GAElB,OACI,yBAAKC,UAAU,QACf,yBAAKA,UAAU,gBACX,yBAAKC,IAAKF,EAAMG,OAAOC,MAAOC,IAAI,kBACtC,yBAAKJ,UAAU,gBACX,yBAAKA,UAAU,cACf,4BAAKD,EAAMG,OAAOG,MAClB,2BAAIN,EAAMG,OAAOI,UACjB,qCACA,2BAAIP,EAAMQ,OAEV,yBAAKP,UAAU,WAAU,2BAAID,EAAMS,UACnC,yBAAKP,IAAKF,EAAMU,MAAOL,IAAI,mB,OCCpBM,MAhBf,SAA0BX,GAAQ,IAAD,EACDY,oBAAS,GADR,mBACtBC,EADsB,KACdC,EADc,KAO7B,OACI,6BACA,4BAAQC,QANZ,WACID,GAAWD,KAMPA,EAASb,EAAMgB,UAAYhB,EAAMiB,cCLvCC,EAAQ,CACZZ,KAAM,mBACNF,MAJmB,6FAKnBG,SAAU,eAoBGY,MAhBf,WACE,OACE,yBAAKlB,UAAU,OACb,4BAAQA,UAAU,cAClB,kBAAC,EAAD,CAAUE,OAAQe,EACfT,QAAQ,kDACRC,MAdS,gGAeTF,KAAM,iCACN,kBAAC,EAAD,CACAQ,UAAU,SACVC,WAAW,eCZAG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.46d5d54f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\nfunction ShowPost(props){\r\n\r\nreturn (\r\n    <div className='post'>\r\n    <div className='photo_author'>\r\n        <img src={props.author.photo} alt='photo_author'/></div>\r\n    <div className='post_content'>\r\n        <div className='first-line'>\r\n        <h4>{props.author.name}</h4>\r\n        <p>{props.author.nickname}</p>\r\n        <p>•</p>\r\n        <p>{props.date}</p>\r\n        </div>\r\n        <div className='comment'><p>{props.content}</p></div>\r\n        <img src={props.image} alt='photo_image'/>\r\n    </div>    \r\n    </div>\r\n);\r\n}\r\nexport default ShowPost;","import React, { useState } from 'react';\r\n\r\nfunction ChangeTextButton(props) {\r\n    const [btnTxt, changeTxt] = useState(true);\r\n\r\n    function eventClickBtn() {\r\n        changeTxt(!btnTxt)\r\n    }\r\n\r\n    return ( \r\n        <div>\r\n        <button onClick = { eventClickBtn } >{\r\n            btnTxt ? props.activeTxt : props.disableTxt\r\n        }</button>\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default ChangeTextButton;","import React from 'react';\nimport './App.css';\nimport ShowPost from './components/post';\nimport ChangeTextButton from './components/button';\n\nconst ANAKIN_IMAGE = \"https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg\";\nconst RAY_IMAGE = \"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale\";\nconst author1={\n  name: \"Anakin skywalker\",\n  photo: ANAKIN_IMAGE,\n  nickname: \"@dart_vader\"\n  }\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <ShowPost author={author1}\n         content=\"WTF? Who is Ray? Why she is Skywalker? Luke...?\"\n         image={RAY_IMAGE}\n         date={\"26 февр.\"}/>\n         <ChangeTextButton\n         activeTxt='Active'\n         disableTxt='Disable'/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}